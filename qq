[33mcommit 037fb5d8d90611d372a166a4dba56dc609b4928a[m
Author: artifaqiq <artifaqiq@gmail.com>
Date:   Sun Mar 20 19:34:24 2016 +0300

    lab2 ready review

[1mdiff --git a/lab2/ChildMake b/lab2/ChildMake[m
[1mdeleted file mode 100644[m
[1mindex 211b04e..0000000[m
[1m--- a/lab2/ChildMake[m
[1m+++ /dev/null[m
[36m@@ -1,14 +0,0 @@[m
[31m-CC=g++[m
[31m-CFLAGS=-c -Wall -std=c++11[m
[31m-[m
[31m-all: printpidprog[m
[31m-[m
[31m-printpidprog:  printpidprog.o[m
[31m-	$(CC) printpidprog.o -o printpidprog[m
[31m-[m
[31m-printpidprog.o: printpidprog.cpp[m
[31m-	$(CC) $(CFLAGS) printpidprog.cpp[m
[31m-[m
[31m-[m
[31m-clean:[m
[31m-	rm -rf printpidprog.o printpidprog[m
\ No newline at end of file[m
[1mdiff --git a/lab2/MainMake b/lab2/MainMake[m
[1mdeleted file mode 100644[m
[1mindex 5aaaee2..0000000[m
[1m--- a/lab2/MainMake[m
[1m+++ /dev/null[m
[36m@@ -1,19 +0,0 @@[m
[31m-CC=g++[m
[31m-CFLAGS=-c -Wall -std=c++11[m
[31m-[m
[31m-all: mainprog[m
[31m-[m
[31m-mainprog: main.o processinfo.o processmanager.o[m
[31m-	$(CC) main.o processinfo.o processmanager.o -o mainprog[m
[31m-[m
[31m-main.o: main.cpp[m
[31m-	$(CC) $(CFLAGS) main.cpp[m
[31m-[m
[31m-processinfo.o: processinfo.cpp[m
[31m-	$(CC) $(CFLAGS) processinfo.cpp[m
[31m-[m
[31m-processmanager.o: processmanager.cpp[m
[31m-	$(CC) $(CFLAGS) processmanager.cpp[m
[31m-[m
[31m-clean:[m
[31m-	rm -rf *.o mainprog[m
\ No newline at end of file[m
[1mdiff --git a/lab2/main.cpp b/lab2/main.cpp[m
[1mdeleted file mode 100644[m
[1mindex bcf6fef..0000000[m
[1m--- a/lab2/main.cpp[m
[1m+++ /dev/null[m
[36m@@ -1,129 +0,0 @@[m
[31m-#ifdef __linux__[m
[31m-#include <unistd.h>[m
[31m-#include <signal.h>[m
[31m-#elif _WIN32[m
[31m-#include <windows.h>[m
[31m-#include <conio.h>[m
[31m-#endif[m
[31m-#include <iostream>[m
[31m-#include <stdio.h>[m
[31m-#include <vector>[m
[31m-#include "processmanager.h"[m
[31m-[m
[31m-ProcessManager manager;[m
[31m-#ifdef __linux__[m
[31m-#define getSymbol getchar[m
[31m-[m
[31m-void handlerEmpty(int signo, siginfo_t* info, void* context){}[m
[31m-[m
[31m-void handlerSigIsPrint(int signo, siginfo_t* info, void* context)[m
[31m-{[m
[31m-  manager.startManager();[m
[31m-}[m
[31m-[m
[31m-#elif _WIN32[m
[31m-#define getSymbol getchar_noblock[m
[31m-int getchar_noblock()[m
[31m-{[m
[31m-  if (_kbhit())[m
[31m-      return _getch();[m
[31m-  else[m
[31m-      return -1;[m
[31m-}[m
[31m-#endif[m
[31m-[m
[31m-int main()[m
[31m-{[m
[31m-[m
[31m-  std::cout<<"Main pid = "<<ProcessInfo::getCurrentPid()<<std::endl;[m
[31m-  std::cout<<"+ add process\n- kill last process\nq exit program\n";[m
[31m- #ifdef __linux__[m
[31m-  sigset_t setSigWait;[m
[31m-  if(sigemptyset(&setSigWait) != 0) {[m
[31m-    std::cerr<<"sigemptyset error. errno = "<<errno<<std::endl;[m
[31m-    exit(-1);[m
[31m-  }[m
[31m-  if(sigaddset(&setSigWait, SIGRTMIN+5) != 0) {[m
[31m-    std::cerr<<"sigemptyset error. errno = "<<errno<<std::endl;[m
[31m-    exit(-2);[m
[31m-  }[m
[31m-  struct sigaction actOnSig;[m
[31m-  actOnSig.sa_mask = setSigWait;[m
[31m-  actOnSig.sa_sigaction = handlerSigIsPrint;[m
[31m-  actOnSig.sa_flags = SA_RESTART | SA_SIGINFO;[m
[31m-  if(sigaction(SIGRTMIN+5, &actOnSig, nullptr) != 0) {[m
[31m-    std::cerr<<"sigaction error. errno = "<<errno<<std::endl;[m
[31m-    exit(errno);[m
[31m-   }[m
[31m- #elif _WIN32[m
[31m-  SECURITY_ATTRIBUTES secAttr;[m
[31m-  secAttr.nLength = sizeof(SECURITY_ATTRIBUTES);[m
[31m-  secAttr.bInheritHandle = true;[m
[31m-  secAttr.lpSecurityDescriptor = 0;[m
[31m-  HANDLE hEvent;[m
[31m-  if((hEvent=CreateEventA(&secAttr, false, false,"manager_event")) == 0) {[m
[31m-    std::cerr<<"Error. last error = "<<GetLastError()<<std::endl;[m
[31m-    exit(-1);[m
[31m-  }[m
[31m-  if(GetLastError() == ERROR_ALREADY_EXISTS) {[m
[31m-    std::cerr<<"Error. last error = ERROR_ALREADY_EXISTS"<<std::endl;[m
[31m-    exit(-2);[m
[31m-  }[m
[31m-  if(ResetEvent(hEvent) == false) {[m
[31m-    std::cerr<<"Error ResetEvent(). last error = "<<GetLastError()<<std::endl;[m
[31m-    exit(-3);[m
[31m-  }[m
[31m- #endif[m
[31m-  char inputSymbol;[m
[31m-  while((inputSymbol = getSymbol()) != 'q') {[m
[31m-	  switch(inputSymbol) {[m
[31m-	    case '+':[m
[31m-	      try {[m
[31m-	        manager.addProcess("printpidprog");[m
[31m-	        if(manager.countProc() == 1) {[m
[31m-	          manager.startManager();[m
[31m-	        }[m
[31m-	      } catch (ProcessManager::Exception) {[m
[31m-	        manager.termAll();[m
[31m-	       #ifdef _WIN32[m
[31m-	        CloseHandle(hEvent);[m
[31m-	       #endif[m
[31m-	        exit(-3);[m
[31m-	      }[m
[31m-	      break;[m
[31m-	    case '-':[m
[31m-	      try {[m
[31m-	        int lastTerm;[m
[31m-	        lastTerm = manager.termLast();[m
[31m-	        if(lastTerm == 0) {[m
[31m-	          std::cout << "First add process"<<std::endl;[m
[31m-	          break;[m
[31m-	        }[m
[31m-	      } catch (ProcessManager::Exception) {[m
[31m-	     #ifdef _WIN32[m
[31m-	        CloseHandle(hEvent);[m
[31m-	     #endif[m
[31m-	        manager.termAll();[m
[31m-	        exit(-4);[m
[31m-	      }[m
[31m-	    default:[m
[31m-	     #ifdef _WIN32[m
[31m-	      if (manager.countProc()>1) {[m
[31m-	        WaitForSingleObject(hEvent, INFINITE);[m
[31m-	        manager.startManager();[m
[31m-	      } else if(manager.countProc() == 1){[m
[31m-	        manager.startManager();[m
[31m-	      }[m
[31m-	     #endif[m
[31m-	   	  break;[m
[31m-	  }[m
[31m-  }[m
[31m-  manager.termAll();[m
[31m-#ifdef _WIN32[m
[31m-  CloseHandle(hEvent);[m
[31m-#endif[m
[31m-  return 0;[m
[31m-}[m
[31m-[m
[31m-[m
[31m-[m
[1mdiff --git a/lab2/printpidprog.cpp b/lab2/printpidprog.cpp[m
[1mdeleted file mode 100644[m
[1mindex 22870c3..0000000[m
[1m--- a/lab2/printpidprog.cpp[m
[1m+++ /dev/null[m
[36m@@ -1,164 +0,0 @@[m
[31m-#include <stdlib.h>[m
[31m-#include <stdio.h>[m
[31m-#ifdef  __linux__[m
[31m-#include <unistd.h>[m
[31m-#include <signal.h>[m
[31m-#elif __WIN32[m
[31m-#include <windows.h>[m
[31m-#include <iostream>[m
[31m-#endif[m
[31m-void printMessage();[m
[31m-#ifdef  __linux__[m
[31m-[m
[31m-void emptyHandle(int signo, siginfo_t* info, void* context){}[m
[31m-[m
[31m-void sigTermHandle(int signo, siginfo_t *info, void *context)[m
[31m-{[m
[31m-  lockf(fileno(stdout), F_LOCK, 100);[m
[31m-  printf("Terminated process [ pid = %d ]\n", getpid());[m
[31m-  lockf(fileno(stdout), F_ULOCK, 100);[m
[31m-  sigqueue(getppid(), SIGRTMIN+5, {0});[m
[31m-  exit(0);[m
[31m-}[m
[31m-[m
[31m-#endif[m
[31m-[m
[31m-int main(int argc, char* argv[])[m
[31m-{[m
[31m- #ifdef  __linux__[m
[31m-  sigset_t sigSetPrint;[m
[31m-  if (sigemptyset(&sigSetPrint) != 0) {[m
[31m-    puts("sigemtyset error");[m
[31m-    exit(-1);[m
[31m-  }[m
[31m-  if (sigaddset(&sigSetPrint, SIGRTMIN+10) != 0) {[m
[31m-    puts("siaddset error");[m
[31m-    exit(-2);[m
[31m-  }[m
[31m-  struct sigaction actOnPrint;[m
[31m-  actOnPrint.sa_flags = SA_SIGINFO |SA_RESTART;[m
[31m-  actOnPrint.sa_mask = sigSetPrint;[m
[31m-  actOnPrint.sa_sigaction = emptyHandle;[m
[31m-  if (sigaction(SIGRTMIN+10, &actOnPrint, 0) != 0) {[m
[31m-    puts("sigaction error");[m
[31m-    exit(-2);[m
[31m-  }[m
[31m-[m
[31m-  sigset_t sigSetTerm;[m
[31m-  if (sigemptyset(&sigSetPrint) != 0) {[m
[31m-    puts("sigemtyset error");[m
[31m-    exit(-1);[m
[31m-  }[m
[31m-  if (sigaddset(&sigSetPrint, SIGTERM) != 0) {[m
[31m-    puts("sigaddset error");[m
[31m-    exit(-2);[m
[31m-  }[m
[31m-  struct sigaction actOnTerm;[m
[31m-  actOnTerm.sa_flags = SA_SIGINFO |SA_RESTART;[m
[31m-  actOnTerm.sa_mask = sigSetTerm;[m
[31m-  actOnTerm.sa_sigaction = sigTermHandle;[m
[31m-  if (sigaction(SIGTERM, &actOnTerm, 0) != 0) {[m
[31m-    puts("sigaction error");[m
[31m-    exit(-2);[m
[31m-  }[m
[31m-  siginfo_t infoPrintSig;[m
[31m-  for(long i = 0; ;i++) {[m
[31m-    sigwaitinfo(&sigSetPrint, &infoPrintSig);[m
[31m-    if(i == 0) {[m
[31m-      printf("Start process [ pid = %d ]\n", getpid());[m
[31m-    } else {[m
[31m-      printMessage();[m
[31m-    }[m
[31m-    usleep(100);[m
[31m-    sigqueue(getppid(), SIGRTMIN+5, {0});[m
[31m-  }[m
[31m-  return 0;[m
[31m- #elif _WIN32[m
[31m-  if(argc != 2) {[m
[31m-    printf("argc != 2. Error\n");[m
[31m-    return 1;[m
[31m-  }[m
[31m-  HANDLE hPrintEvent;[m
[31m-  if ((hPrintEvent = OpenEventA(EVENT_ALL_ACCESS, FALSE, argv[1])) == 0) {[m
[31m-    printf("OpenEvent() error. last error: ", GetLastError());[m
[31m-    exit(-1);[m
[31m-  }[m
[31m-  HANDLE hManagerEvent;[m
[31m-  if ((hManagerEvent = OpenEventA(EVENT_ALL_ACCESS, FALSE, "manager_event")) == 0) {[m
[31m-    printf("OpenEvent() error. last error: ", GetLastError());[m
[31m-    exit(-1);[m
[31m-  }[m
[31m-  HANDLE hTermEvent;[m
[31m-  char termEventName[250];[m
[31m-  strcpy(termEventName, argv[1]);[m
[31m-  strcat(termEventName, "XXX");[m
[31m-  if ((hTermEvent = OpenEventA(EVENT_ALL_ACCESS, true, termEventName)) == 0) {[m
[31m-    printf("OpenEvent() error. last error = ", GetLastError());[m
[31m-    exit(-1);[m
[31m-  }[m
[31m-  for(long i=0;;i++) {[m
[31m-    WaitForSingleObject(hPrintEvent,INFINITE);[m
[31m-    if(WaitForSingleObject(hTermEvent,0) == WAIT_OBJECT_0) {[m
[31m-      if(SetEvent(hManagerEvent) == 0) {[m
[31m-        printf("SetEvent error Manager. last error = %d\n",GetLastError());[m
[31m-        exit(-2);[m
[31m-      }[m
[31m-      CloseHandle(hTermEvent);[m
[31m-      return 0;[m
[31m-    }[m
[31m-    if(i == 0 ) {[m
[31m-      printf("process [ pid = %d ] started ...\n", GetCurrentProcessId());[m
[31m-    }[m
[31m-    printMessage();[m
[31m-    if(SetEvent(hManagerEvent) == 0) {[m
[31m-      printf("SetEvent error. last error = %d\n",GetLastError());[m
[31m-      exit(-2);[m
[31m-    }[m
[31m-  }[m
[31m-  return 0;[m
[31m- #endif[m
[31m-}[m
[31m-[m
[31m-void printMessage() [m
[31m-{[m
[31m-  printf("%c", 'm');[m
[31m-  printf("%c", 'y');[m
[31m-  printf("%c", ' ');[m
[31m-  printf("%c", 'p');[m
[31m-  printf("%c", 'i');[m
[31m-  printf("%c", 'd');[m
[31m-  printf("%c", ' ');[m
[31m-  printf("%c", '=');[m
[31m-  printf("%c", ' ');[m
[31m- #ifdef  __linux__[m
[31m-  printf("%d", getpid());[m
[31m- #elif _WIN32[m
[31m-  printf("%d", GetCurrentProcessId());[m
[31m- #endif[m
[31m-  printf("%c", ' ');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", ' ');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", ' ');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", ' ');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '.');[m
[31m-  printf("%c", '\n');[m
[31m-}[m
[31m-[m
[1mdiff --git a/lab2/processinfo.cpp b/lab2/processinfo.cpp[m
[1mdeleted file mode 100644[m
[1mindex 81a7089..0000000[m
[1m--- a/lab2/processinfo.cpp[m
[1m+++ /dev/null[m
[36m@@ -1,115 +0,0 @@[m
[31m-#ifdef  __linux__[m
[31m-#include <signal.h>[m
[31m-#include <sys/wait.h>[m
[31m-#include <unistd.h>[m
[31m-#elif _WIN32[m
[31m-#endif[m
[31m-#include <iostream>[m
[31m-#include "processinfo.h"[m
[31m-[m
[31m-ProcessInfo::ProcessInfo() {}[m
[31m-[m
[31m-void ProcessInfo::terminate()[m
[31m-{[m
[31m- #ifdef  __linux__[m
[31m-  if(mPid == 0) {[m
[31m-    return;[m
[31m-  }[m
[31m-  kill(SIGKILL, mPid);[m
[31m-  waitpid(mPid, 0, WNOHANG);[m
[31m-  mPid=0;[m
[31m- #elif _WIN32[m
[31m-  if(TerminateProcess(mPinf.hProcess,0) == false) {[m
[31m-    std::cerr << "Exception. TerminateProcess error. last error: "<<GetLastError() << std::endl;[m
[31m-    throw ProcessInfo::Exception("TerminateProcess");[m
[31m-    }[m
[31m-  CloseHandle(mPinf.hProcess);[m
[31m-  CloseHandle(mPinf.hThread);[m
[31m- #endif[m
[31m-}[m
[31m-[m
[31m-int ProcessInfo::getCurrentPid() {[m
[31m- #ifdef  __linux__[m
[31m-  return getpid();[m
[31m- #elif _WIN32[m
[31m-  return GetCurrentProcessId();[m
[31m- #endif[m
[31m-}[m
[31m-[m
[31m-int ProcessInfo::getPid()[m
[31m-{[m
[31m- #ifdef  __linux__[m
[31m-  return mPid;[m
[31m- #elif _WIN32[m
[31m-  return mPinf.dwProcessId;[m
[31m- #endif[m
[31m-}[m
[31m-[m
[31m-void ProcessInfo::createAndExec(std::string filename)[m
[31m-{[m
[31m- #ifdef  __linux__[m
[31m-  pid_t pid;[m
[31m-  pid = fork();[m
[31m-  if(pid < 0) {[m
[31m-    std::cerr << "Exception. Fork() error" << std::endl;[m
[31m-    throw Exception("fork error");[m
[31m-    } else if(pid == 0) {[m
[31m-      execl(filename.c_str(), 0);[m
[31m-    } else {[m
[31m-      mPid=pid;[m
[31m-    }[m
[31m- #elif _WIN32[m
[31m-  STARTUPINFOA stInfo;[m
[31m-  ZeroMemory(&stInfo, sizeof(stInfo));[m
[31m-  stInfo.cb = sizeof(stInfo);[m
[31m-  ZeroMemory(&mPinf, sizeof(mPinf));[m
[31m-  if(CreateProcessA(nullptr,[m
[31m-                    const_cast<LPSTR>(filename.c_str()),[m
[31m-                    NULL,[m
[31m-                    NULL,[m
[31m-                    false,[m
[31m-                    NULL,[m
[31m-                    NULL,[m
[31m-                    NULL,[m
[31m-                    &stInfo,[m
[31m-                    &mPinf) == false) {[m
[31m-    std::cerr<<"Exception. CreateProcess() error. last error: "<<GetLastError()<<std::endl;[m
[31m-    throw ProcessInfo::Exception ("CreateProcess() error");[m
[31m-    }[m
[31m- #endif[m
[31m-[m
[31m-}[m
[31m-[m
[31m-#ifdef  __linux__[m
[31m-void ProcessInfo::createAndFunc(void (*handle)())[m
[31m-{[m
[31m-  pid_t pid;[m
[31m-  pid = fork();[m
[31m-  if(pid < 0) {[m
[31m-    throw Exception("fork error");[m
[31m-  } else if(pid == 0) {[m
[31m-    handle();[m
[31m-    exit(0);[m
[31m-  } else {[m
[31m-    if(waitpid(pid, nullptr, 0) != 0) {[m
[31m-      std::cerr<<"waitpid error. errno1 = "<<errno<<std::endl;[m
[31m-      throw ProcessInfo::Exception("waitpid error");[m
[31m-    }[m
[31m-    mPid=pid;[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-void ProcessInfo::sendSignal(int signo)[m
[31m-{[m
[31m-  kill(mPid, signo);[m
[31m-}[m
[31m-#endif[m
[31m-[m
[31m-ProcessInfo::Exception::Exception(std::string info)[m
[31m-{[m
[31m-    Exception::info = info;[m
[31m-}[m
[31m-std::string ProcessInfo::Exception::getInfo()[m
[31m-{[m
[31m-    return Exception::info;[m
[31m-}[m
[1mdiff --git a/lab2/processinfo.h b/lab2/processinfo.h[m
[1mdeleted file mode 100644[m
[1mindex e9ca411..0000000[m
[1m--- a/lab2/processinfo.h[m
[1m+++ /dev/null[m
[36m@@ -1,35 +0,0 @@[m
[31m-#ifndef PROCESSINFO_H[m
[31m-#define PROCESSINFO_H[m
[31m-#include <string>[m
[31m-#ifdef _WIN32[m
[31m-#include <windows.h>[m
[31m-#endif[m
[31m-[m
[31m-class ProcessInfo[m
[31m-{[m
[31m- private:[m
[31m- #ifdef  __linux__[m
[31m-  pid_t mPid = 0;[m
[31m- #elif _WIN32[m
[31m-  PROCESS_INFORMATION mPinf;[m
[31m- #endif[m
[31m- public:[m
[31m-  class Exception {[m
[31m-  protected:[m
[31m-    std::string info;[m
[31m-    public:[m
[31m-       Exception(std::string info);[m
[31m-       std::string getInfo();[m
[31m-    };[m
[31m-    ProcessInfo();[m
[31m-    void terminate();[m
[31m-    int getPid();[m
[31m-    void createAndExec(std::string filename);[m
[31m-    static int getCurrentPid();[m
[31m- #ifdef  __linux__[m
[31m-    void sendSignal(int signo);[m
[31m-    void createAndFunc(void (*handle)(void));[m
[31m- #endif[m
[31m-};[m
[31m-[m
[31m-#endif // PROCESSINFO_H[m
[1mdiff --git a/lab2/processmanager.cpp b/lab2/processmanager.cpp[m
[1mdeleted file mode 100644[m
[1mindex 94a3021..0000000[m
[1m--- a/lab2/processmanager.cpp[m
[1m+++ /dev/null[m
[36m@@ -1,159 +0,0 @@[m
[31m-#include "processmanager.h"[m
[31m-#include <iostream>[m
[31m-#ifdef  __linux__[m
[31m-#include <signal.h>[m
[31m-#include <unistd.h>[m
[31m-#include <sys/wait.h>[m
[31m-#elif _WIN32[m
[31m-#include <cmath>[m
[31m-#endif[m
[31m-[m
[31m-ProcessManager::ProcessManager(){}[m
[31m-[m
[31m-void ProcessManager::addProcess(std::string pathname)[m
[31m-{[m
[31m- #ifdef  __linux__[m
[31m-  try {[m
[31m-    ProcessInfo tempProc;[m
[31m-    tempProc.createAndExec(pathname);[m
[31m-    mListProc.push_back(tempProc);[m
[31m-    mPriorityProcess = mListProc.begin();[m
[31m-  } catch(ProcessInfo::Exception exc) {[m
[31m-    throw ProcessManager::Exception(exc.getInfo());[m
[31m-  }[m
[31m- #elif _WIN32[m
[31m-  SECURITY_ATTRIBUTES secAttr;[m
[31m-  secAttr.nLength = sizeof(SECURITY_ATTRIBUTES);[m
[31m-  secAttr.bInheritHandle = true;[m
[31m-  secAttr.lpSecurityDescriptor = 0;[m
[31m-  char eventName[20];[m
[31m-  sprintf(eventName, "%d", this->countProc()+1);[m
[31m-  char cmdLine[250];[m
[31m-  strcpy (cmdLine, pathname.c_str());[m
[31m-  strcat(cmdLine, " ");[m
[31m-  strcat(cmdLine, eventName);[m
[31m-  HANDLE hEventPrint;[m
[31m-  if((hEventPrint=CreateEventA(&secAttr, false, false, eventName)) == 0) {[m
[31m-    std::cerr<<"Exc. last error = "<<GetLastError()<<std::endl;[m
[31m-    throw ProcessManager::Exception ("addProcess exception");[m
[31m-  }[m
[31m-  mEventsPrint.push_back(hEventPrint);[m
[31m-  mPriorityProcess = mEventsPrint.end();[m
[31m-  mPriorityProcess--;[m
[31m-[m
[31m-  strcat(eventName, "XXX");[m
[31m-  HANDLE hEventTerm;[m
[31m-  if((hEventTerm=CreateEventA(&secAttr, false, false, eventName)) == 0) {[m
[31m-    std::cerr<<"Exc2. last error = "<<GetLastError()<<std::endl;[m
[31m-    throw ProcessManager::Exception ("addProcess exception");[m
[31m-  }[m
[31m-  mEventsTerm.push_back(hEventTerm);[m
[31m-[m
[31m-  ProcessInfo tempProc;[m
[31m-  try {[m
[31m-    tempProc.createAndExec(cmdLine);[m
[31m-  } catch (ProcessInfo::Exception exc) {[m
[31m-    throw ProcessManager::Exception(exc.getInfo());[m
[31m-  }[m
[31m-  mListProc.push_back(tempProc);[m
[31m- #endif[m
[31m-}[m
[31m-[m
[31m-void ProcessManager::termAll()[m
[31m-{[m
[31m- #ifdef _WIN32[m
[31m-  auto itEventPrint = mEventsPrint.begin();[m
[31m-  auto itEventTerm = mEventsTerm.begin();[m
[31m- #endif[m
[31m-  auto itProc = mListProc.begin();[m
[31m-  for(;itProc != mListProc.end();itProc++) {[m
[31m-    try {[m
[31m-      itProc->terminate();[m
[31m-     #ifdef _WIN32[m
[31m-      CloseHandle(*itEventPrint);[m
[31m-      CloseHandle(*itEventTerm);[m
[31m-      itEventPrint++;[m
[31m-      itEventTerm++;[m
[31m-     #endif[m
[31m-    } catch (ProcessInfo::Exception exc) {[m
[31m-      throw ProcessManager::Exception (exc.getInfo());[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-int ProcessManager::countProc()[m
[31m-{[m
[31m-    return mListProc.size();[m
[31m-}[m
[31m-[m
[31m-int ProcessManager::termLast()[m
[31m-{[m
[31m-  if(mListProc.empty()) {[m
[31m-    return 0;[m
[31m-  }[m
[31m-  ProcessInfo termProc = mListProc.back();[m
[31m-  try {[m
[31m-   #ifdef _WIN32[m
[31m-    if(mPriorityProcess + 1 == mEventsPrint.end()) {[m
[31m-      mPriorityProcess = mEventsPrint.begin();[m
[31m-    }[m
[31m-    SetEvent(mEventsTerm.back());[m
[31m-    SetEvent(mEventsPrint.back());[m
[31m-    CloseHandle(mEventsPrint.back());[m
[31m-    mEventsPrint.pop_back();[m
[31m-    mEventsTerm.pop_back();[m
[31m-    mListProc.pop_back();[m
[31m-   #elif  __linux__[m
[31m-    if(mPriorityProcess + 1 == mListProc.end()) {[m
[31m-      mPriorityProcess = mListProc.begin();[m
[31m-    }[m
[31m-    mListProc.back().terminate();[m
[31m-    int exitCode;[m
[31m-    waitpid(termProc.getPid(), &exitCode, WNOHANG);[m
[31m-    mListProc.pop_back();[m
[31m-   #endif[m
[31m-    return termProc.getPid();[m
[31m-   } catch (ProcessInfo::Exception exc) {[m
[31m-    throw (exc.getInfo());[m
[31m-   }[m
[31m-}[m
[31m-[m
[31m-void ProcessManager::startManager()[m
[31m-{[m
[31m-  if(this->isEmpty()){[m
[31m-    return;[m
[31m-  }[m
[31m- #ifdef  __linux__[m
[31m-  usleep(20000);[m
[31m-  if(sigqueue(mPriorityProcess->getPid(), SIGRTMIN+10, {0})<0) {[m
[31m-    std::cerr<<"sigqueue error. errno = "<<errno<<std::endl;[m
[31m-    throw ProcessManager::Exception("sigqueue error");[m
[31m-  }[m
[31m-  if(++mPriorityProcess == mListProc.end()) {[m
[31m-  mPriorityProcess = mListProc.begin();[m
[31m-  }[m
[31m- #elif _WIN32[m
[31m-  Sleep(20);[m
[31m-  if(SetEvent(*mPriorityProcess) == 0) {[m
[31m-    std::cerr<<"SetEvent error. last error = "<< GetLastError()<<std::endl;[m
[31m-  }[m
[31m-  if(++mPriorityProcess == mEventsPrint.end()) {[m
[31m-    mPriorityProcess = mEventsPrint.begin();[m
[31m-  }[m
[31m- #endif[m
[31m-}[m
[31m-[m
[31m-bool ProcessManager::isEmpty()[m
[31m-{[m
[31m-    return mListProc.empty();[m
[31m-}[m
[31m-[m
[31m-ProcessManager::Exception::Exception(std::string info)[m
[31m-{[m
[31m-    Exception::info=info;[m
[31m-}[m
[31m-[m
[31m-std::string ProcessManager::Exception::getInfo()[m
[31m-{[m
[31m-    return Exception::info;[m
[31m-}[m
[1mdiff --git a/lab2/processmanager.h b/lab2/processmanager.h[m
[1mdeleted file mode 100644[m
[1mindex 78ac54b..0000000[m
[1m--- a/lab2/processmanager.h[m
[1m+++ /dev/null[m
[36m@@ -1,37 +0,0 @@[m
[31m-#ifndef PROCESSMANAGER_H[m
[31m-#define PROCESSMANAGER_H[m
[31m-#include <vector>[m
[31m-#include "processinfo.h"[m
[31m-#ifdef _WIN32[m
[31m-#include <map>[m
[31m-#endif[m
[31m-class ProcessManager[m
[31m-{[m
[31m- private:[m
[31m-  std::vector<ProcessInfo> mListProc;[m
[31m- #ifdef  __linux__[m
[31m-  std::vector<ProcessInfo>::iterator mPriorityProcess;[m
[31m- #elif _WIN32[m
[31m-  std::vector<HANDLE> mEventsPrint;[m
[31m-  std::vector<HANDLE> mEventsTerm;[m
[31m-  std::vector<HANDLE>::iterator mPriorityProcess;[m
[31m- #endif[m
[31m- public:[m
[31m-  class Exception[m
[31m-  {[m
[31m-   protected:[m
[31m-    std::string info;[m
[31m-   public:[m
[31m-    Exception(std::string info);[m
[31m-    std::string getInfo();[m
[31m-  };[m
[31m-  ProcessManager();[m
[31m-  void startManager();[m
[31m-  void addProcess(std::string pathname);[m
[31m-  int termLast();[m
[31m-  void termAll();[m
[31m-  bool isEmpty();[m
[31m-  int countProc();[m
[31m-};[m
[31m-[m
[31m-#endif // PROCESSMANAGER_H[m
